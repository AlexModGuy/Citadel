plugins {
    id 'idea'
    id 'java'
    id 'maven-publish'
    id 'java-library'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
    id 'com.gradleup.shadow' version '8.3.5'
}

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

repositories {
    gradlePluginPortal()
    mavenLocal()

    maven {
        url "https://plugins.gradle.org/m2/"
    }

    maven {
        name = 'Jitpack'
        url 'https://jitpack.io'
    }
}

configurations {
    shade
    library
    library.extendsFrom(shade)
    implementation.extendsFrom(library)
}

base {
    archivesName = "${mod_id}-${minecraft_version}"
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

//jarJar.enable()

//archivesBaseName = "${mod_id}-neoforge-${minecraft_version}"

/*
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}
 */

if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    all*.exclude group: 'net.sourceforge.jaad', module: 'jcodec'
}


tasks.named("test").configure {
    enabled = false
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":Common")
    //jaadec fork by yours truly to decode mp4 audio
    shade('com.github.AlexModGuy:JAADec:master-SNAPSHOT') {
        ['commons-logging', 'org.slf4j'].each {
            exclude group: "$it"
        }
    }
    //jcodec for decoding mp4 video
    shade('org.jcodec:jcodec:0.2.5') {
        exclude group: 'net.sourceforge.jaad.aac'
        ['commons-logging', 'org.slf4j', 'net.sourceforge.jaad.aac'].each {
            exclude group: "$it"
        }
    }

}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":Common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
    source(project(":Common").sourceSets.main.allJava)
}
/*
tasks.named("sourcesJar", Jar) {
    from(project(":Common").sourceSets.main.allSource)
}
 */

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":Common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

jar {
    //classifier 'slim'
    afterEvaluate {
        configurations.shade.each { dep ->
            from(project.zipTree(dep)) {
                exclude 'META-INF', 'META-INF/**'
            }
        }
    }
}

shadowJar {
    //    classifier ''
    configurations = [project.configurations.shade]
    duplicatesStrategy 'exclude'
    relocate 'net.sourceforge.jaad', 'com.github.alexthe666.citadel.repack.jaad'
    relocate 'org.jcodec', 'com.github.alexthe666.citadel.repack.jcodec'
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn(shadowJar)

jar.finalizedBy('reobfJar')
