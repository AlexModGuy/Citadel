buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
        gradlePluginPortal()
        jcenter()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

configurations {
    shade
    library
    library.extendsFrom(shade)
    minecraftLibrary.extendsFrom(library)
}

version = "${mod_version}-${mc_version}"
group = "com.tfar.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)


println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.19.4'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".mixins.json"
            property 'forge.logging.console.level', 'debug'

            mods {
                citadel {
                    source sourceSets.main
                }
            }
        }

        server {
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".mixins.json"


            property 'forge.logging.console.level', 'debug'

            mods {
                citadel {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', sourceSets.main.resources.srcDirs[0]
            mods {
                citadel {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories{
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        //maven for all github project releases
        url "https://jitpack.io"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.4-45.0.8'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    //jaadec fork by yours truly to decode mp4 audio
    shade ('com.github.AlexModGuy:JAADec:master-SNAPSHOT') {
        ['commons-logging', 'org.slf4j'].each {
            exclude group: "$it"
        }
    }
    //jcodec for decoding mp4 video
    shade ('org.jcodec:jcodec:0.2.5') {
        exclude group: 'net.sourceforge.jaad.aac'
        ['commons-logging', 'org.slf4j', 'net.sourceforge.jaad.aac'].each {
            exclude group: "$it"
        }
    }
}

configurations {
    all*.exclude group: 'net.sourceforge.jaad', module:'jcodec'
}

sourceSets {
    main.resources.srcDirs += 'src/generated/resources'
}


jar {
    classifier 'slim'
    afterEvaluate {
        configurations.shade.each { dep ->
            from(project.zipTree(dep)){
                exclude 'META-INF', 'META-INF/**'
            }
        }

    }
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy 'exclude'
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "citadel",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"citadel",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}


//builds the jar with shadowed dependencies
shadowJar {
    classifier ''
    configurations = [project.configurations.shade]
    duplicatesStrategy 'exclude'
    relocate 'net.sourceforge.jaad', 'com.github.alexthe666.citadel.repack.jaad'
    relocate 'org.jcodec', 'com.github.alexthe666.citadel.repack.jcodec'
    finalizedBy 'reobfShadowJar'
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}

assemble.dependsOn(shadowJar)

reobf {
    shadowJar {}
}

jar.finalizedBy('reobfJar')
